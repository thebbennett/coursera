match(subset[,col], sort(subset[,col]))
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
num <- max(rank) - num +1
num
num <- 7
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
num <- max(rank) - num +1
num
rank
rank(rank)
rank(rank)
order(rank)
input
rank <- rank(input)
rank
rank(rank)
n <- length(unique(rank))
n
which(rank == sort(unique(x), partial = n-1[n-1]))
which(rank == sort(unique(rank), partial = n-1[n-1]))
which(rank == sort(unique(rank), partial = n-1)[n-1])
sapply(sort(rank, index.return = TRUE), `[`, length(rank)-num+1)
which(rank == 29)
subset[7, "Hospital.Name"]
rank
sort(rank)
sorted <- sort(rank)
sorted[7]
sorted[29]
rank[29]
subset[66,"Hospital.Name"]
col
state
subset <- data[data$State == state,]
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
rank
order(rank)
ordered <- order(rank)
ordered[7]
subset[21, "Hospital.Name"]
setwd("~/Coursera Data Science/R Programming/Week 4/rprog%2Fdata%2FProgAssignment3-data")## Check that state and outcome are valid
best <- function(state, outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
data[, col] <- as.numeric(data[, col])
## Return hospital name in that state with lowest 30-day death rate
subset <- data[data$State == state,]
row <- which(subset[,col] == min(subset[,col], na.rm = TRUE))
name <- subset[row, "Hospital.Name"]
name
}
rankhospital <- function(state, outcome, num){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
## Return hospital name in that state with the given rank
subset <- data[data$State == state,]
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
num <- max(rank) - num +1
ordered <- order(rank)
row <- ordered[num]
#row <- which(rank == num)
name <-
subset[row, "Hospital.Name"]
name
}
rankall <- function(outcome, num){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
## Check that state and outcome are valid
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
states <- unique(data[,"State"])
df <- data.frame(matrix(ncol = 2, nrow= 1))
for (i in 1:length(states)){
subset <- data[data$State == states[i],]
rank <- rank(subset$Hospital.Name)
row <- which(rank == num)
name <- as.character(subset[row, "Hospital.Name"])
result <- c(name, states[i])
df <- rbind(df, result)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
df
}
rankhospital("WA", "heart attack", 7)
setwd("~/Coursera Data Science/R Programming/Week 4/rprog%2Fdata%2FProgAssignment3-data")## Check that state and outcome are valid
best <- function(state, outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
data[, col] <- as.numeric(data[, col])
## Return hospital name in that state with lowest 30-day death rate
subset <- data[data$State == state,]
row <- which(subset[,col] == min(subset[,col], na.rm = TRUE))
name <- subset[row, "Hospital.Name"]
name
}
rankhospital <- function(state, outcome, num){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
## Return hospital name in that state with the given rank
subset <- data[data$State == state,]
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
num <- max(rank) - num
ordered <- order(rank)
row <- ordered[num]
#row <- which(rank == num)
name <-
subset[row, "Hospital.Name"]
name
}
rankall <- function(outcome, num){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
## Check that state and outcome are valid
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
states <- unique(data[,"State"])
df <- data.frame(matrix(ncol = 2, nrow= 1))
for (i in 1:length(states)){
subset <- data[data$State == states[i],]
rank <- rank(subset$Hospital.Name)
row <- which(rank == num)
name <- as.character(subset[row, "Hospital.Name"])
result <- c(name, states[i])
df <- rbind(df, result)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
df
}
rankhospital("WA", "heart attack", 7)
setwd("~/Coursera Data Science/R Programming/Week 4/rprog%2Fdata%2FProgAssignment3-data")## Check that state and outcome are valid
best <- function(state, outcome){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
data[, col] <- as.numeric(data[, col])
## Return hospital name in that state with lowest 30-day death rate
subset <- data[data$State == state,]
row <- which(subset[,col] == min(subset[,col], na.rm = TRUE))
name <- subset[row, "Hospital.Name"]
name
}
rankhospital <- function(state, outcome, num){
##Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
if (outcome == "heart attack"){
col <- 11
} else if(outcome == "heart failure"){
col <- 17
} else if(outcome == "pneumonia"){
col <-23
}
## Return hospital name in that state with the given rank
subset <- data[data$State == state,]
input <- subset[,col]
rank <- rank(input)
if (num == "worst"){
num <- max(rank)
} else if (num == "best"){
num <- 1
}
ordered <- order(rank)
row <- ordered[num]
#row <- which(rank == num)
name <-
subset[row, "Hospital.Name"]
name
}
rankall <- function(outcome, num){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[, 11] <- as.numeric(data[, 11])
## Check that state and outcome are valid
if (!(outcome %in% c("heart attack",
"heart failure","pneumonia"))){
stop("invalid outcome")
}
## For each state, find the hospital of the given rank
states <- unique(data[,"State"])
df <- data.frame(matrix(ncol = 2, nrow= 1))
for (i in 1:length(states)){
subset <- data[data$State == states[i],]
rank <- rank(subset$Hospital.Name)
row <- which(rank == num)
name <- as.character(subset[row, "Hospital.Name"])
result <- c(name, states[i])
df <- rbind(df, result)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
df
}
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
state <- "TX"
outcome <- "pneumonia"
num <- 10
col <- 23
subset <- data[data$State == state,]
input <- subset[,col]
rank <- rank(input)
rank
whuch(rank == 10)
which(rank == 10)
ordered <- order(rank)
ordered
which(ordered == 10)
subset[12, "Hospital.Nane"]
subset[12, "Hospital.Name"]
which(rank == 12)
which(ordered == 360)
subset[361, "Hospital.Name"]
subset[360, "Hospital.Name"]
which(ordered == 361)
which(ordered == 360)
which(rank == 361)
subset[11, "Hospital.Name"]
subset[9, "Hospital.Name"]
subset[10, "Hospital.Name"]
state
ts <- subset[order(subset[, eval(outcome)], subset[, "hospital"], decreasing = TRUE), ]
si <- which(subset[, "state"] == state)
ts <- subset[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
si <- which(subset[, "state"] == state)
subset
si <- which(data[, "state"] == state)
si <- which(data[, "State"] == state)
si
ts <- subset[si, ]                     # extracting dataframe for the called state
ts
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts[, col] <- as.numeric(ts[, col)
ts[, col] <- as.numeric(ts[, col])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
ts <- ts[order(ts[, col], ts[, "hospital"]), ]
ts <- ts[order(ts[, col], ts[, "Hospital.Name"]), ]
output <- ts[, "hospital"][rank]
output <- ts[, "Hospital.Name"][rank]
output
si <- which(data[, "State"] == state)
ts <- subset[si, ]                     # extracting dataframe for the called state
ts[, col] <- as.numeric(ts[, col])
ts <- ts[order(ts[, col], ts[, "Hospital.NAme"]), ]
output <- ts[, "Hospital.Name"][rank]
output
si
ts
ts <- subset[si, ]
head(ts)
str(ts)
str(si)
si$State
subset <- data[data$State == state,]                     # extracting dataframe for the called state
subset[, col] <- as.numeric(subset[, col])
ts <- ts[order(ts[, col], ts[, "Hospital.NAme"]), ]
output <- ts[, "Hospital.Name"][rank]
output
subset <- data[data$State == state,]                     # extracting dataframe for the called state
subset[, col] <- as.numeric(subset[, col])
ts <- ts[order(ts[, col], ts[, "Hospital.Name"]), ]
output <- ts[, "Hospital.Name"][rank]
output
subset <- data[data$State == state,]                     # extracting dataframe for the called state
subset[, col] <- as.numeric(subset[, col])
ts <- subset[order(ts[, col], subset[, "Hospital.Name"]) ]
output <- ts[, "Hospital.Name"][rank]
output
subset <- data[data$State == state,]                     # extracting dataframe for the called state
subset[, col] <- as.numeric(subset[, col])
ts <- subset[order(subset[, col], subset[, "Hospital.Name"]) ]
output <- ts[, "Hospital.Name"][rank]
output
ts
subset
subset[order(subset[,col])]
col
subset[,col]
order(subset[,col])
order(subset[,col], subset[,"Hospital.Name"])
ts <- subset[order(subset[,col], subset[, "Hospital.Name"])]
ts <- subset[order(subset[,col], subset[, "Hospital.Name"]),]
head(ts)
subset <- data[data$State == state,]                     # extracting dataframe for the called state
subset[, col] <- as.numeric(subset[, col])
ts <- subset[order(subset[,col], subset[, "Hospital.Name"]),]
output <- ts[, "Hospital.Name"][rank]
output
rankhospital <- function(state, outcome, rank = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
## Check that state and outcome are valid
if (!state %in% fd[, "state"]) {
stop('invalid state')
} else if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(rank)) {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]                     # extracting dataframe for the called state
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"]), ]
output <- ts[, "hospital"][rank]
} else if (!is.numeric(rank)){
if (rank == "best") {
output <- best(state, outcome)
} else if (rank == "worst") {
si <- which(fd[, "state"] == state)
ts <- fd[si, ]
ts[, eval(outcome)] <- as.numeric(ts[, eval(outcome)])
ts <- ts[order(ts[, eval(outcome)], ts[, "hospital"], decreasing = TRUE), ]
output <- ts[, "hospital"][1]
} else {
stop('invalid rank')
}
}
return(output)
}
rankhospital("TX", "pneumonia", 10)
rankhospital("WA", "heart attack", 7)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
fd   <- as.data.frame(cbind(data[, 2],  # hospital
data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
