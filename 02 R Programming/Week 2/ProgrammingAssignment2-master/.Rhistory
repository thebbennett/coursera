dataset(iris)
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
sapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
library(KernSmooth)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(4)
makeVector()
makeVector(4,5)
makeVector(4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(4)
setwd("~/Coursera Data Science/ProgrammingAssignment2-master")
makeVector(4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(4)
makeVector(x)
makeVector(1:4)
makeVector()
myVector <- makeVector(1:15)
myVector
x
?inverse
?inv
library(matlib)
install.packages("matlib")
makeCacheMatrix <- function(x = matrix()) {
i <- NULL                                    ##initialize i and x
set <- function(y) {                         ##defines the set function
x <<- y                                    ##assigns the input value to the object in the parent environment
i <<- NULL                                 ##resets i to NULL
get <- function() x                          ##defines getter for matrix x
setinverse <- function(inv) i <<- inv        ##defines getter for the matrix x
getinverse <- function() i                   ##defines the setter for the inverse
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
?matrix
a <-matrix(c(2,4,3,1,5,7), nrow=2,col=3)
a <-matrix(c(2,4,3,1,5,7), nrow=2,ncol=3)
a
makeCacheMatrix <- function(x = matrix()) {
i <- NULL                                    ##initialize i and x
set <- function(y) {                         ##defines the set function
x <<- y                                    ##assigns the input value to the object in the parent environment
i <<- NULL                                 ##resets i to NULL
get <- function() x                          ##defines getter for matrix x
setinverse <- function(inv) i <<- inv        ##defines getter for the matrix x
getinverse <- function() i                   ##defines the setter for the inverse
list(set = set,                              # gives the name 'set' to the set() function defined above
get = get,                              # gives the name 'get' to the get() function defined above
setmean = setmean,                      # gives the name 'setmean' to the setmean() function defined above
getmean = getmean)                      # gives the name 'getmean' to the getmean() function defined above
}
}
makeCacheMatrix(a)
makeCacheMatrix(a)
a
makeCacheMatrix <- function(x = matrix()) {
i <- NULL                                    ##initialize i and x
set <- function(y) {                         ##defines the set function
x <<- y                                    ##assigns the input value to the object in the parent environment
i <<- NULL                                 ##resets i to NULL
get <- function() x                          ##defines getter for matrix x
setinverse <- function(inv) i <<- inv        ##defines getter for the matrix x
getinverse <- function() i                   ##defines the setter for the inverse
list(set = set,                              # gives the name 'set' to the set() function defined above
get = get,                              # gives the name 'get' to the get() function defined above
setinverse = setinverse,                      # gives the name 'setmean' to the setmean() function defined above
getinverse = getinverse)                      # gives the name 'getmean' to the getmean() function defined above
}
}
makeCacheMatrix(a)
result <- makeCacheMatrix(a)
View(result)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL                                    ##initialize i and x
set <- function(y) {                         ##defines the set function
x <<- y                                    ##assigns the input value to the object in the parent environment
i <<- NULL                                 ##resets i to NULL
}
get <- function() x                          ##defines getter for matrix x
setinverse <- function(inv) i <<- inv        ##defines getter for the matrix x
getinverse <- function() i                   ##defines the setter for the inverse
list(set = set,                              # gives the name 'set' to the set() function defined above
get = get,                              # gives the name 'get' to the get() function defined above
setinverse = setinverse,                      # gives the name 'setmean' to the setmean() function defined above
getinverse = getinverse)                      # gives the name 'getmean' to the getmean() function defined above
}
result <- makeCacheMatrix(a)
result
cacheSolve <- function(x, ...) {
libtrary(matlib)
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inv(data, ...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
cacheSolve(result)
cacheSolve <- function(x, ...) {
library(matlib)
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inv(data, ...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
cacheSolve(result)
a <- matrix(c(1,2,3,4), nrow=2, ncol=2)
a
makeCacheMatrix(a)
result <- makeCacheMatrix(a)
cacheSolve(result)
